{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d5e26e5c.chunk.js","sourcesContent":["import React, {Fragment, useState} from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    // crear state de Citas\r\n\r\n    const[cita,actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n    })\r\n    const[ error, actualizarError] = useState(false);\r\n\r\n    // función que se ejecuta cada vez que el usuario escribe en el input\r\n    const actualizarState= e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    const { mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    // Cuando el usuario presione \"agregar cita\"\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(mascota.trim() === \"\" || propietario.trim() === \"\" || fecha.trim() === \"\" || hora.trim() === \"\" || sintomas.trim() === \"\" ){\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n        \r\n        // eliminar mensaje anterior\r\n        actualizarError(error);\r\n\r\n        // asignar un ID\r\n        cita.id = uuid();\r\n\r\n        // crear una cita\r\n        crearCita(cita);\r\n\r\n        // reinciar el form\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n                {error ? <p className=\"alerta-error\">Todos los campos son requeridos</p> : null }\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre de la Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState} //o handleChange\r\n                    value={mascota}\r\n                />\r\n                <label>Dueño de la Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del dueño de la Mascota\"\r\n                    onChange={actualizarState} //o handleChange\r\n                    value={propietario}\r\n                />\r\n                <label>fecha</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState} //o handleChange\r\n                    value={fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState} //o handleChange\r\n                    value={hora}\r\n                />\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState} //o handleChange\r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","// @flow \r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n    return (\r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{cita.mascota}</span></p>\r\n            <p>Dueño: <span>{cita.propietario}</span></p>\r\n            <p>Fecha: <span>{cita.fecha}</span></p>\r\n            <p>Hora: <span>{cita.hora}</span></p>\r\n            <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n            \r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                onClick={() => eliminarCita(cita.id)}\r\n            >Eliminar &times;</button>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React,{ Fragment, useState, useEffect } from 'react';\r\nimport Formulario from \"./components/Formulario\";\r\nimport Cita from \"./components/Cita\";\r\n\r\nfunction App() {\r\n\r\n  // Citas en local Storage\r\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\r\n  if(!citasIniciales){\r\n    citasIniciales = [];\r\n  }\r\n\r\n  // Arreglo de citas\r\n  const [citas, guardarCitas] = useState(citasIniciales);\r\n\r\n  // Use Effect para realizar ciertas operaciones cuando el state  cambia\r\n  useEffect( () => {\r\n    if(citasIniciales) {\r\n      localStorage.setItem('citas', JSON.stringify(citas))\r\n    }else{\r\n      localStorage.setItem('citas', JSON.stringify([]))\r\n    }\r\n  }, [citas, citasIniciales] );\r\n  \r\n  // Función que tome las citas actuales y guarde las nuevas\r\n  const crearCita = cita => {\r\n    guardarCitas([\r\n      ...citas,\r\n      cita\r\n    ]);\r\n  }\r\n\r\n  // Función que elimina las citas existentes\r\n  const eliminarCita = id => {\r\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\r\n    guardarCitas(nuevasCitas);\r\n  }\r\n\r\n  //Mensaje condicional\r\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>Administrador de Pacientes</h1>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"one-half column\">\r\n            <Formulario \r\n              crearCita={crearCita}\r\n            />\r\n          </div>\r\n          <div className=\"one-half column\">\r\n            <h2>{titulo}</h2>\r\n              {citas.map(cita => (\r\n                <Cita \r\n                  key={cita.id} \r\n                  cita={cita}\r\n                  eliminarCita={eliminarCita}\r\n                />\r\n              ))}\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}